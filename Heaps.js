/*

KIND OF TREES

BINARY HEAP: VERY SIMILAR TO A BINARY SEARCH TREE BUT WITH SOME DIFFERENT RULES!

    IN A MaxBinaryHeap, PARENT NODES ARE ALWAYS LARGER THAN CHILD NODES.
    IN A MinBinaryHeap, PARENT NODES ARE ALWAYS SMALLER THAN CHILD NODES.


 MaxBinaryHeap:-

1. EACH PARENT HAS AT MOST TWO CHILD NODES.
2. THE VALUE OF EACH PARENT NODE IS ALWAYS GREATER THAN ITS CHILD NODES.
3. IN A MAX BINARY HEAP THE PARENT IS GREATER THAN THE CHILDREN BUT THERE ARE NO GUARANTEES BETWEEN SIBLING NODES.
4. A BINARY HEAP IS AS COMPACT AS POSSIBLE. ALL THE CHILDREN OF EACH NODE ARE AS FULL AS THEY CAN BE AND LEFT CHILDREN ARE FILLED OUT FIRST.

WHY:- 
1. BINARY HEAPS ARE USED TO IMPLEMENT PRIORITY QUEUES, WHICH ARE VERY COMMONLY USED DATA STRUCTURES
2. THEY ARE ALSO USED QUITE A BIT, WITH GRAPH TRAVERSAL ALGORITHMS

STORING: 
1. FOR ANY INDEX OF AN ARRAY n, THE LEFT CHILD IS STORED AT 2n+1 AND THE RIGHT CHILD IF STORED AT 2n+2
2. FOR ANY CHILD NODE AT INDEX n, ITS PARENT IS AT INDEX Math.floor((n-1)/2)

*/
